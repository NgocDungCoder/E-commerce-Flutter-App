import 'dart:async';
import 'package:intl/intl.dart';
import 'package:flutter/services.dart';  // ƒê·∫£m b·∫£o b·∫°n import th∆∞ vi·ªán n√†y

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:ecomercy_app_flutter/services/order_service.dart';
import 'package:ecomercy_app_flutter/services/product_service.dart';
import 'package:ecomercy_app_flutter/views/bill/bill_detail_state.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class BillDetailLogic extends GetxController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final orderService = OrderService();
  final state = BillDetailState();
  final _productService = ProductService();

  BillDetailLogic();

  @override
  void onInit() {
    super.onInit();
    state.orderID = Get.arguments;
    print("orderID: ${state.orderID.value.runtimeType}");
    getOrderById(state.orderID.value);
  }

  Future<void> getOrderById(String orderId) async {
    if (state.isLoading.value) return;
    state.isLoading.value = true;

    try {
      var newOrders =
          await orderService.getOrderById("zYhe1dcYsDcr4qGcwKWg", orderId);
      if (newOrders != null) {
        state.productsOfOrder.clear();
        state.productsOfOrder.addAll(newOrders['items']);
        state.order.clear();
        state.order.addAll(newOrders);
        getOrderDetail();
        state.isLoading.value = false;
        // state.isIndicatorLoding.value = false;
        print('order ƒë√£ t·∫£i v·ªÅ');
        print(state.order);
      }
    } catch (e) {
      print('L·ªói khi l·∫•y d·ªØ li·ªáu: $e');
    } finally {
      state.isLoading.value = false;
      update();
    }
  }

  //ko t·ªëi ∆∞u b·∫±ng
  // void getOrderDetail() async {
  //   List orderItems = state.productsOfOrder;
  //   try {
  //     for (var item in orderItems) {
  //       String productId = item['productID'];
  //       int quantity = item['quantity'];
  //       Map<String, dynamic>? productData =
  //           await _productService.getProductById(productId);
  //       if (productData != null) {
  //         print("Tr∆∞·ªõc");
  //         print(state.productsDetail);
  //         productData['quantity'] = quantity;
  //         state.productsDetail.add(productData);
  //         try {
  //           final imageProvider = NetworkImage(productData['image']);
  //           final completer = Completer<void>();
  //
  //           imageProvider.resolve(ImageConfiguration()).addListener(
  //             ImageStreamListener(
  //                   (imageInfo, _) => completer.complete(),
  //               onError: (error, stackTrace) {
  //                 print("‚ö†Ô∏è L·ªói t·∫£i ·∫£nh: $error"); // In l·ªói n·∫øu ·∫£nh t·∫£i th·∫•t b·∫°i
  //                 completer.complete();
  //               },
  //             ),
  //           );
  //
  //           await completer.future;
  //         } catch (e) {
  //           print("‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω ·∫£nh: $e");
  //         }
  //         print("Sau");
  //         print(state.productsDetail);
  //       }
  //     }
  //   } catch (e) {
  //     print('L·ªói khi l·∫•y s·∫£n ph·∫©m: $e');
  //   }
  //
  // }
  void getOrderDetail() async {
    final orderItems = state.productsOfOrder;

    try {
      // Load t·∫•t c·∫£ products song song
      final productsData = await Future.wait(orderItems.map((item) async {
        try {
          final productId = item['productID'];
          final quantity = item['quantity'];

          final productData = await _productService.getProductById(productId);

          if (productData == null) return {}; // Skip n·∫øu null
          productData['quantity'] = quantity;

          // Check ·∫£nh c√≥ load ƒë∆∞·ª£c kh√¥ng
          try {
            final imageProvider = NetworkImage(productData['image']);
            final completer = Completer<void>();

            imageProvider.resolve(const ImageConfiguration()).addListener(
              ImageStreamListener(
                    (imageInfo, _) => completer.complete(),
                onError: (error, stackTrace) {
                  print("‚ö†Ô∏è L·ªói t·∫£i ·∫£nh: $error");
                  completer.complete();
                },
              ),
            );

            await completer.future;
          } catch (e) {
            print("‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω ·∫£nh: $e");
          }

          return productData;
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω product: $e');
          return {}; // Return r·ªóng n·∫øu c√≥ l·ªói
        }
      }));

      // L·ªçc b·ªè data r·ªóng (n·∫øu c√≥ product b·ªã l·ªói)
      state.productsDetail.addAll(productsData.where((e) => e.isNotEmpty));

      print("üî• Danh s√°ch product detail: ${state.productsDetail}");
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m: $e');
    }
  }

  String formatDateTime(String dateTimeString) {
    final dateTime = DateTime.parse(dateTimeString);
    return DateFormat('yyyy-MM-dd HH:mm').format(dateTime);
  }

  void copyToClipboard(BuildContext context) {
    // Sao ch√©p chu·ªói v√†o clipboard
    Clipboard.setData(ClipboardData(text: state.orderID.value));

    // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n khi sao ch√©p th√†nh c√¥ng
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('ƒê√£ sao ch√©p: ${state.orderID.value}'), duration: Duration(seconds: 1),),
    );
  }
}
